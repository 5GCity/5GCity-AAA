{
    "name": "Slice Manager API",
    "version": "0.1.0",
    "description": "This API provides interaction between the 5GCity platform and the Slice Manager.",
    "visibility": "PUBLIC",
    "paths": {
        "/virtual_resource_link/:virtual_resource_link_id": [],
        "/virtual_resource_link": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tresult.state = State.FAILURE;\n    \tresult.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n//request_content.name = username;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/user/:user_id": [],
        "/user": [],
        "/slic3/:slice_id": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onRequestScript": "",
                    "onResponseScript": "",
                    "onResponseContentScript": "import groovy.json.JsonSlurper\nimport io.gravitee.policy.groovy.PolicyResult.State\n\ndef jsonSlurper = new JsonSlurper();\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload'])\ndef user_id = auth_content.os_id\n\ndef user_roles = auth_content.realm_access.roles\n\nif (!user_roles.contains('User')) {\n\n    result.state = State.FAILURE\n    result.code = 403\n\n}\n\n\nif (!user_roles.contains('Administrator') && user_roles.contains('User')) {\n    // List Tenant Related\n    // Users and not admins can only search for owned resource\n    def jsonSlurper2 = new JsonSlurper()\n    def content = jsonSlurper2.parseText(response.content)\n\n    if(content.user_id != user_id){\n        result.state = State.FAILURE\n        result.code = 403\n    }\n}\n\nreturn response.content"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "DELETE"
                ],
                "groovy": {
                    "onResponseContentScript": "if(response.status != 204){\n\treturn response.content\n}\n\nserviceId = request.pathInfo.split('/').last()\n\ndef post = new URL('@MONITORING_IP_PORT@/monitoring/monitoring/api/slice/' + serviceId).openConnection()\n\npost.setRequestMethod(\"DELETE\")\npost.setDoOutput(true)\npost.getResponseCode();\n\nreturn response.content\n"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/slic3": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\nif(!user_roles.contains('User')){\n\n  \tresult.state = State.FAILURE;\n    result.code = 403;\n\n}\n\n\nif(!user_roles.contains('Administrator') && user_roles.contains('User')){\n\t// List Tenant Related\n\t// Users and not admins can only search for owned resource\n\trequest.parameters().clear();\n\trequest.parameters().put('user_id', Collections.singletonList(user_id));\n}\n\n",
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ndef jsonSlurper2 = new JsonSlurper()\nusers = jsonSlurper2.parseText(new URL(\"@SM_IP_PORT@/api/v0.1/user\").text)\n\ndef tenantMap = [:]\nusers.each { tenantMap[it.id] = it.name }\n\nif (content instanceof List || content instanceof Collection ){\n  content.each{ it.tenant_name = tenantMap[it.user_id] } \n} else {\n  content.tenant_name = tenantMap[content.user_id]\n}\n\nreturn JsonOutput.toJson(content)"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tresult.state = State.FAILURE;\n    \tresult.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/configuredRadioPhys": [],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_topology/:physicalInterface/wirelessConfig": [
            {
                "methods": [
                    "PUT"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    \tresult.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_topology/:physicalInterface/type/:interface_type": [
            {
                "methods": [
                    "PUT"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    \tresult.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_topology/:physicalInterface/LTEConfig": [
            {
                "methods": [
                    "PUT"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    \tresult.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_topology": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ndef boxes = content.boxes\nboxes.each {\n\n  def location = it.location\n  location.info = \"\"\n\n  if(location.latitude > 100 || location.longitude > 100){\n    location.latitude = 51.447827\n    location.longitude = -2.598014\n    location.info = \"\"\n  }\n\n}\n\nreturn JsonOutput.toJson(content)"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_chunk/:chunkete_chunk_id/swam_service/:swam_service_id": [],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_chunk/:chunkete_chunk_id/swam_service": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tprintln \"Invalid request\";\n\tresult.state = State.FAILURE;\n    \tresult.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n//request_content.name = username;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_chunk/:chunkete_chunk_id": [],
        "/ran_infrastructure/:ran_infrastructure_id/chunkete_chunk": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ncontent.each {\n    it.remove('user_id')\n}\n\nreturn JsonOutput.toJson(content"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tprintln \"Invalid request\";\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/ran_infrastructure/:ran_infrastructure_id": [],
        "/ran_infrastructure": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ncontent.each {\n    it.remove('user_id')\n}\nreturn JsonOutput.toJson(content)"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tprintln \"Invalid request\";\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "DELETE"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/physical_network/:physical_network_id": [
            {
                "methods": [
                    "DELETE"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/physical_network": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestScript": "",
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tprintln \"Invalid request\";\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add physical network data\nif(!request_content.containsKey(\"physical_network_data\")){\n  request_content.physical_network_data = [:]\n}\n\nrequest_content.physical_network_data.auth_url = \"@COMPUTE_AUTH_URL@\";\nrequest_content.physical_network_data.domain_name = \"@COMPUTE_DOMAIN_NAME@\";\nrequest_content.physical_network_data.password = \"@COMPUTE_PASSWORD@\";\nrequest_content.physical_network_data.project_name = \"@COMPUTE_PROJECT_NAME@\";\nrequest_content.physical_network_data.username = \"@COMPUTE_USERNAME@\";\nrequest_content.neutron_phy_net_name=\"@neutron_phy_net_name@\"\n\n// Add user information\nrequest_content.user_id = user_id;\n//request_content.name = username;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ncontent.each {\n   it.remove('user_id')\n  def temp = it.physical_network_data\n  //temp.remove(\"auth_url\")\n  //temp.remove(\"domain_name\")\n  temp.remove(\"password\")\n  //temp.remove(\"project_name\")\n  temp.remove(\"username\")\n  \n}\n\nreturn JsonOutput.toJson(content)",
                    "onRequestScript": ""
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/physical_link/:physical_link_id": [
            {
                "methods": [
                    "DELETE"
                ],
                "groovy": {
                    "onRequestContentScript": "",
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/physical_link": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tprintln \"Invalid request\";\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/openstack_vlan/:openstack_vlan_id": [],
        "/openstack_vlan": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onRequestScript": "import groovy.json.JsonSlurper\nimport io.gravitee.policy.groovy.PolicyResult.State\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload'])\ndef user_id = auth_content.os_id\n\ndef user_roles = auth_content.realm_access.roles\n\nif (!user_roles.contains('User')) {\n\n    result.state = State.FAILURE\n    result.code = 403\n\n}\n\nif (!user_roles.contains('Administrator') && user_roles.contains('User')) {\n    // List Tenant Related\n    // Users and not admins can only search for owned resource\n    request.parameters().clear()\n    request.parameters().put('user_id', Collections.singletonList(user_id))\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tresult.state = State.FAILURE;\n    \tresult.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/openstack_project/:openstack_project_id": [],
        "/openstack_project": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\nimport io.gravitee.policy.groovy.PolicyResult.State\n\ndef jsonSlurper = new JsonSlurper()\n\n\ndef request_content = jsonSlurper.parseText(request.content)\nif (!request_content) {\n    result.state = State.FAILURE\n    result.code = 400\n}\n\n// Add user information\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload'])\ndef user_id = auth_content.os_id\nrequest_content.user_id = user_id\nrequest_content.password = 'password'\n\nreturn JsonOutput.toJson(request_content)\n",
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\ndef content = jsonSlurper.parseText(response.content)\n\ncontent.remove('osm_vim_id')\ncontent.remove('os_user_id')\ncontent.remove('os_project_id')\n\n\nreturn JsonOutput.toJson(content)"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onRequestScript": "import groovy.json.JsonSlurper\nimport io.gravitee.policy.groovy.PolicyResult.State\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload'])\ndef user_id = auth_content.os_id\n\ndef user_roles = auth_content.realm_access.roles\n\nif (!user_roles.contains('User')) {\n\n    result.state = State.FAILURE\n    result.code = 403\n\n}\n\nif (!user_roles.contains('Administrator') && user_roles.contains('User')) {\n    // List Tenant Related\n    // Users and not admins can only search for owned resource\n    request.parameters().clear()\n    request.parameters().put('user_id', Collections.singletonList(user_id))\n}"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/network_service_instance/:network_service_instance_id": [
            {
                "methods": [
                    "DELETE"
                ],
                "groovy": {
                    "onResponseContentScript": "if(response.status != 204){\n\treturn response.content\n}\n\nserviceId = request.pathInfo.split('/').last()\n\ndef post = new URL('@MONITORING_IP_PORT@/monitoring/monitoring/api/service/' + serviceId).openConnection()\n\npost.setRequestMethod(\"DELETE\")\npost.setDoOutput(true)\npost.getResponseCode();\n\nreturn response.content\n"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/network_service_instance": [
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\nif(!user_roles.contains('User')){\n\n  \tresult.state = State.FAILURE;\n    result.code = 403;\n\n}\n\n\nif(!user_roles.contains('Administrator') && user_roles.contains('User')){\n\t// List Tenant Related\n\t// Users and not admins can only search for owned resource\n\trequest.parameters().clear();\n\trequest.parameters().put('user_id', Collections.singletonList(user_id));\n}\n"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);",
                    "onResponseContentScript": "import groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\nif(response.status == 500){\n  def jsonSlurper = new JsonSlurper()\n  def content = jsonSlurper.parseText('{}')\n  return JsonOutput.toJson(content)\n}\n\ndef jsonSlurper = new JsonSlurper()\ndef content = jsonSlurper.parseText(response.content)\n\nif(response.status != 200){\n\treturn response.content\n}\n\nString id = content.id\n\ndef jsonSlurper2 = new JsonSlurper()\ndef nsBody =  jsonSlurper2.parseText('{ \"id\": \"' +id+'\"}')\n\ndef post = new URL('@MONITORING_IP_PORT@/monitoring/monitoring/api/service').openConnection()\n\n\ndef message = '{ \"id\": \"' +id+'\", \"slice\": \"'+content.slic3_id+'\"}'\npost.setRequestMethod(\"POST\")\npost.setDoOutput(true)\npost.setRequestProperty(\"Content-Type\", \"application/json\")\npost.getOutputStream().write(message.getBytes(\"UTF-8\"));\npost.getResponseCode();\n\nreturn response.content"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/network_service/:network_service_id": [],
        "/network_service": [],
        "/compute/:compute_id": [
            {
                "methods": [
                    "DELETE",
                    "PATCH",
                    "PUT"
                ],
                "groovy": {
                    "onRequestScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    \tresult.code = 403;\n}\n"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/compute": [
            {
                "methods": [
                    "POST"
                ],
                "groovy": {
                    "onRequestContentScript": "import io.gravitee.policy.groovy.PolicyResult.State\nimport io.gravitee.policy.api.PolicyChain;\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\ndef jsonSlurper = new JsonSlurper();\n\ndef auth_content = jsonSlurper.parseText(context.attributes['oauth.payload']);\ndef username = auth_content.tenant_label;\ndef user_id = auth_content.os_id;\n\ndef user_roles = auth_content.realm_access.roles\n\n// Only admins can create computes\nif(!user_roles.contains('Administrator')){\n\tresult.state = State.FAILURE;\n    result.code = 403;\n}\n\ndef request_content = jsonSlurper.parseText(request.content);\nif (!request_content){\n\tresult.state = State.FAILURE;\n    result.code = 400;\n}\n\n// Add compute data\nif(!request_content.containsKey(\"compute_data\")){\n  request_content.compute_data = [:]\n}\n\nrequest_content.compute_data.auth_url = \"@COMPUTE_AUTH_URL@\";\nrequest_content.compute_data.domain_name = \"@COMPUTE_DOMAIN_NAME@\";\nrequest_content.compute_data.password = \"@COMPUTE_PASSWORD@\";\nrequest_content.compute_data.project_name = \"@COMPUTE_PROJECT_NAME@\";\nrequest_content.compute_data.username = \"@COMPUTE_USERNAME@\";\n\n// Add user information\nrequest_content.user_id = user_id;\n\nreturn JsonOutput.toJson(request_content);"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            },
            {
                "methods": [
                    "GET"
                ],
                "groovy": {
                    "onResponseContentScript": "import groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\n\ndef jsonSlurper = new JsonSlurper()\n\nif (response.status == 500) {\n    def content = jsonSlurper.parseText(\"{}\")\n    return JsonOutput.toJson(content)\n}\n\n\ndef content = jsonSlurper.parseText(response.content)\n\ncontent.each {\n  it.remove('user_id')\n  def temp = it.compute_data\n  temp.remove(\"password\")\n  temp.remove(\"username\")\n  temp.remove(\"project_name\")\n  temp.remove(\"domain_name\")\n}\nreturn JsonOutput.toJson(content)"
                },
                "description": "Description of the Groovy Gravitee Policy",
                "enabled": true
            }
        ],
        "/": []
    },
    "resources": [
        {
            "name": "oauth",
            "type": "oauth2",
            "enabled": true,
            "configuration": {
                "authorizationServerUrl": "@DASH_IP@/auth/realms/5gcity",
                "introspectionEndpoint": "/protocol/openid-connect/token/introspect",
                "introspectionEndpointMethod": "POST",
                "scopeSeparator": " ",
                "userInfoEndpoint": "/protocol/openid-connect/userinfo",
                "userInfoEndpointMethod": "GET",
                "useClientAuthorizationHeader": true,
                "clientAuthorizationHeaderName": "Authorization",
                "clientAuthorizationHeaderScheme": "Basic",
                "tokenIsSuppliedByQueryParam": false,
                "tokenQueryParamName": "token",
                "tokenIsSuppliedByHttpHeader": false,
                "tokenIsSuppliedByFormUrlEncoded": true,
                "tokenFormUrlEncodedName": "token",
                "clientId": "my_client",
                "clientSecret": "348e4121-2a64-4a4c-9cc7-7111b3f25621"
            }
        }
    ],
    "members": [
        {
            "source": "memory",
            "sourceId": "admin",
            "role": "PRIMARY_OWNER"
        }
    ],
    "pages": [],
    "plans": [
        {
            "id": "b38a959a-1a59-4351-8a95-9a1a59635161",
            "name": "Oauth2",
            "description": "Plan using Oauth2",
            "validation": "MANUAL",
            "security": "OAUTH2",
            "securityDefinition": "{\"extractPayload\":true,\"checkRequiredScopes\":false,\"requiredScopes\":[],\"oauthResource\":\"oauth\"}",
            "type": "API",
            "status": "PUBLISHED",
            "apis": [
                "deaadfa1-42bd-4b0a-aadf-a142bdbb0a73"
            ],
            "order": 0,
            "characteristics": [],
            "created_at": 1573483429925,
            "updated_at": 1573483429925,
            "paths": {
                "/": []
            },
            "excluded_groups": [],
            "comment_required": false
        }
    ],
    "path_mappings": [
        "/network_service_instance",
        "/network_service/:network_service_id",
        "/virtual_wifi_access_point",
        "/openstack_vlan/:openstack_vlan_id",
        "/sdn_wifi_access_point/:sdn_wifi_access_point_id",
        "/virtual_wifi_access_point/:virtual_wifi_access_point_id",
        "/openstack_project",
        "/openstack_project/:openstack_project_id",
        "/",
        "/user/:user_id",
        "/physical_network",
        "/compute",
        "/user",
        "/openstack_vlan",
        "/sdn_wifi_access_point",
        "/physical_network/:physical_network_id",
        "/compute/:compute_id",
        "/network_service",
        "/network_service_instance/:network_service_instance_id"
    ],
    "proxy": {
        "context_path": "/slicemanagerapi",
        "strip_context_path": false,
        "logging": {
            "mode": "NONE"
        },
        "groups": [
            {
                "name": "default",
                "endpoints": [
                    {
                        "name": "default",
                        "target": "http://172.16.100.12:8989/api/v0.1",
                        "weight": 1,
                        "backup": false,
                        "type": "HTTP",
                        "http": {
                            "connectTimeout": 300000,
                            "idleTimeout": 300000,
                            "keepAlive": true,
                            "readTimeout": 300000,
                            "pipelining": false,
                            "maxConcurrentConnections": 100,
                            "useCompression": true,
                            "followRedirects": false
                        },
                        "ssl": {
                            "trustAll": true,
                            "hostnameVerifier": false
                        }
                    }
                ],
                "load_balancing": {
                    "type": "ROUND_ROBIN"
                }
            }
        ],
        "cors": {
            "enabled": true,
            "allowCredentials": false,
            "allowOrigin": [
                "*"
            ],
            "allowHeaders": [
                "authorization",
                "content-type"
            ],
            "allowMethods": [
                "DELETE",
                "POST",
                "GET",
                "PATCH"
            ],
            "exposeHeaders": [],
            "maxAge": -1
        }
    }
}